{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ReactChartkick","addAdapter","Chart","rp","require","HW","data","item","highwater","arr","i","extremes","obj","push","date","height","type","TableHighWater","props","hw_times","time","react_default","a","createElement","map","t","index","key","style","hwStyle","moment","format","listStyleType","textAlign","color","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","graph","timestamp","copyright","_this2","localStorage","getItem","response","JSON","parse","now","first","d","duration","diff","alert","asHours","setState","origin","uri","method","qs","lat","lon","timeout","headers","Origin","User-Agent","json","then","setItem","stringify","catch","err","console","log","message","react_chartkick_esm","legend","download","colors","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0cd7e526.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport moment from 'moment';\n\nimport ReactChartkick, {LineChart} from 'react-chartkick';\nimport Chart from 'chart.js';\nReactChartkick.addAdapter(Chart);\n\n// const data = require('./tide.json')\nconst rp = require('request-promise')\n\n\nfunction HW(data) {\n  let item = []\n  let highwater = []\n  let arr = []\n\n  for(let i in data.extremes) {\n    let obj = data.extremes[i]\n    item.push(obj.date, obj.height)\n    arr.push(item)\n    if(obj.type === \"High\") {\n      highwater.push(obj.date)\n    }\n    item=[]\n  }\n  return {\n    arr:arr,\n    highwater:highwater\n  }\n}\n\nfunction TableHighWater(props) {\n  const hw_times = props.time\n  return (\n    <div>\n    <h1>Times of High Water</h1>\n      <ul>\n        {hw_times.map((t, index) =>\n          <li key={index} style={hwStyle}>{moment(t).format('D-MMM-YY hh:mm A')}</li>)}\n      </ul>\n    </div>\n    )\n  return\n}\n\nconst hwStyle = {\n  listStyleType: 'none',\n  textAlign: 'left',\n  color: '#000',\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      // data: null,\n      highwater:[],\n      graph:[],\n      timestamp:null,\n      copyright:null\n    }\n  }\n\n  componentDidMount() {\n\n  if(localStorage.getItem('tidal_data')) {\n    //if data is more then 24 hours old renew with server call\n    let response = JSON.parse(localStorage.getItem('tidal_data'))\n\n    //date difference now and first entry\n    var now = moment()\n    var first = HW(response).arr[0][0]\n\n    let d = moment.duration(moment(now).diff(moment(first)))\n\n    alert(first)\n    alert(d.asHours())\n\n\n    this.setState ({\n      origin: 'local',\n      highwater: HW(response).highwater,\n      graph:HW(response).arr,\n      copyright:response.copyright\n    })\n  }\n  else {\n     //AJAX call to get data (max 100/month free)\n  //Davao : 7.1907N , 125.4553E\n  const requestOptions = {\n    uri: 'https://www.worldtides.info/api',\n    method: 'GET',\n    qs: {\n     // heights:'',\n     extremes:'',\n     lat:7.1901,\n     lon: 125.4553,\n     key: '70b03d9c-8698-4a77-b0e7-b2f54119de10'\n    },\n    // parameters,\n    // key: '70b03d9c-8698-4a77-b0e7-b2f54119de10',\n    timeout: 5000,\n    headers: {\n      'Origin': 'no-origin',\n      'User-Agent': 'Node.js/worldtides',\n    },\n    json:true\n  };\n\n  rp(requestOptions).then(response => {\n    // alert(JSON.stringify(response))\n    localStorage.setItem('tidal_data',JSON.stringify(response))\n    this.setState({\n      // data : response,\n      origin:'Server',\n      highwater: HW(response).highwater,\n      graph:HW(response).arr,\n      copyright:response.copyright\n    })\n    // alert(this.state.graph)\n    }).catch(err => {\n      console.log('API error: ', err.message)\n      })\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <TableHighWater time={this.state.highwater}/>\n        <LineChart\n          legend={false}\n          download={true}\n          colors={[\"#00ff00\", \"#666\"]}\n          data={(this.state.graph)} />\n        <p>{this.state.origin}</p>\n        <p />\n        <p>{this.state.copyright}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}